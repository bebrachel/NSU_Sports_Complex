# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.4
        ports:
          - 5432:5432
        env:
          POSTGRES_USER:     ${{secrets.SPRING_DATASOURCE_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
          POSTGRES_DB:       ${{secrets.POSTGRES_DB}}
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_USERNAME: ${{secrets.SPRING_DATASOURCE_USERNAME}}
      SPRING_DATASOURCE_PASSWORD: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
      SPRING_DATASOURCE_URL:      ${{secrets.SPRING_DATASOURCE_URL}}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Chmod gradle
        run: chmod +x ./gradlew
        working-directory: ./backend

      - name: Run Build, Checkstyle, and Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew checkstyleMain build sonar --info
        working-directory: ./backend

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.4
        ports:
          - 5432:5432
        env:
          POSTGRES_USER:     ${{secrets.SPRING_DATASOURCE_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
          POSTGRES_DB:       ${{secrets.POSTGRES_DB}}
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_USERNAME: ${{secrets.SPRING_DATASOURCE_USERNAME}}
      SPRING_DATASOURCE_PASSWORD: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
      SPRING_DATASOURCE_URL:      ${{secrets.SPRING_DATASOURCE_URL}}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Chmod gradle
        run: chmod +x ./gradlew
        working-directory: ./backend

      - name: Test with Gradle Wrapper
        env:
          SPRING_DATASOURCE_USERNAME: ${{secrets.SPRING_DATASOURCE_USERNAME}}
          SPRING_DATASOURCE_PASSWORD: ${{secrets.SPRING_DATASOURCE_PASSWORD}}
          SPRING_DATASOURCE_URL: ${{secrets.SPRING_DATASOURCE_URL}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew clean test --info jacocoTestReport sonar
        working-directory: ./backend